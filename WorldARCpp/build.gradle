apply plugin: 'com.android.application'

def arengine_libpath = "${projectDir}/src/main/libs/"
// Create a configuration to mark which aars to extract .so files from
configurations { natives }

android {
    namespace 'com.huawei.arengine.demos.cworld'
    ndkVersion "23.1.7779620"
    compileSdk 33


    defaultConfig {
        applicationId "com.huawei.arengine.demos.cworld"

        minSdkVersion 26
        targetSdkVersion 33
        versionCode 1
        versionName rootProject.ext.versionName

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17", "-Wall"
                arguments "-DANDROID_STL=c++_static",
                        "-DARENGINE_LIBPATH=${arengine_libpath}/jni"
            }
        }
        ndk {
            abiFilters "armeabi-v7a","arm64-v8a"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
            version "3.18.1"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildToolsVersion '33.0.1'
}

dependencies {
    implementation fileTree(include: ['*.aar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.huawei.hms:arenginesdk:4.0.0.5'
    natives 'com.huawei.hms:arenginesdk:4.0.0.5'
}

// Extracts the shared libraries from aars in the natives configuration.
// This is done so that NDK builds can access these libraries.
task extractNativeLibrariesArEngine() {
    outputs.upToDateWhen { false }
    doFirst {
        configurations.natives.files.each { f ->
            copy {
                from zipTree(f)
                into arengine_libpath
                include "jni/**/*"
            }
        }
    }
}

tasks.whenTaskAdded {
    task-> if (task.name.contains("external") && !task.name.contains("Clean")) {
        task.dependsOn(extractNativeLibrariesArEngine)
    }
}

